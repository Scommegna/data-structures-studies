"""
üìò Defini√ß√£o

O algoritmo de Floyd-Warshall √© um algoritmo para encontrar o menor caminho entre todos os pares de v√©rtices em um grafo ponderado (com pesos), que pode ser direcionado ou n√£o.
Ele tamb√©m pode detectar ciclos negativos.
	‚Ä¢	üü¢ Funciona com grafos com arestas negativas, mas n√£o com ciclos negativos.
	‚Ä¢	‚è±Ô∏è Complexidade: O(V¬≥), onde V √© o n√∫mero de v√©rtices.

‚úÖ Aplica√ß√µes
	‚Ä¢	Encontrar todas as dist√¢ncias m√≠nimas entre pares de cidades.
	‚Ä¢	Resolver problemas de roteamento em redes.
	‚Ä¢	Detectar se existe caminho negativo (dist√¢ncia menor que zero entre um n√≥ e ele mesmo).

üß† Ideia principal

A ideia √© usar programa√ß√£o din√¢mica:
	‚Ä¢	dist[i][j] come√ßa com o peso direto da aresta de i para j (ou ‚àû se n√£o existe).
	‚Ä¢	Gradualmente atualizamos dist[i][j] usando v√©rtices intermedi√°rios k.

Rela√ß√£o de recorr√™ncia:
    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])
"""

# üß© Implementa√ß√£o em Matriz de Adjac√™ncia (mais comum):

INF = float('inf')

def floyd_warshall(graph):
    V = len(graph)
    dist = [row[:] for row in graph]  # c√≥pia da matriz original

    for k in range(V):
        for i in range(V):
            for j in range(V):
                if dist[i][k] + dist[k][j] < dist[i][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]

    return dist

# üß™ Exemplo:
graph = [
    [0,   3,   INF, 5],
    [2,   0,   INF, 4],
    [INF, 1,   0,   INF],
    [INF, INF, 2,   0]
]

result = floyd_warshall(graph)

for row in result:
    print(row)

"""
üî¢ Sa√≠da:

[0, 3, 7, 5]
[2, 0, 6, 4]
[3, 1, 0, 5]
[5, 3, 2, 0]
"""

"""
üîÅ Implementa√ß√£o com Lista de Adjac√™ncia

Floyd-Warshall precisa de matriz para funcionar bem. Se tiver uma lista de adjac√™ncia, primeiro converta-a para uma matriz de adjac√™ncia com pesos.
"""

"""
‚úçÔ∏è Exerc√≠cio Simples

Exerc√≠cio 1:
Dado o grafo com 4 v√©rtices e a seguinte matriz de adjac√™ncia (com pesos), use o algoritmo de Floyd-Warshall para encontrar todas as menores dist√¢ncias:
"""

graph = [
    [0, 5, INF, 10],
    [INF, 0, 3, INF],
    [INF, INF, 0, 1],
    [INF, INF, INF, 0]
]

# Sa√≠da esperada:
"""
[0, 5, 8, 9]
[INF, 0, 3, 4]
[INF, INF, 0, 1]
[INF, INF, INF, 0]
"""

def floyd_warshall(input_graph):
    n = len(input_graph)

    dist_matrix = [row[:] for row in input_graph ]

    for k in range(n):
        for j in range(n):
            for i in range(n):
                if dist_matrix[i][k] + dist_matrix[k][j] < dist_matrix[i][j]:
                    dist_matrix[i][j] = dist_matrix[i][k] + dist_matrix[k][j]

    return dist_matrix

print("")
print("First Exercise:")

resp = floyd_warshall(graph)


for row in resp:
    print(row)

"""
üìò Exemplos pr√°ticos onde Floyd-Warshall √© usado e BFS falha:

1. üîÅ Todos os pares de menores caminhos:

Imagine um sistema onde voc√™ quer saber a dist√¢ncia mais curta entre todos os pares de cidades (como em mapas, GPS ou redes).
	‚Ä¢	Floyd-Warshall resolve isso com uma √∫nica execu√ß√£o.
	‚Ä¢	BFS teria que ser executado uma vez para cada v√©rtice e n√£o funcionaria se houver pesos diferentes nas arestas.
	

2. ‚õî Presen√ßa de pesos negativos:

Se o grafo tiver pesos negativos (por exemplo, representar descontos, perdas ou penalidades):
	‚Ä¢	Floyd-Warshall funciona (desde que n√£o haja ciclos negativos).
	‚Ä¢	BFS assume peso constante (geralmente 1), ent√£o n√£o pode lidar com pesos.
	
3. üîç Detec√ß√£o de ciclos negativos:
	‚Ä¢	Floyd-Warshall detecta ciclos negativos ao verificar se dist[i][i] < 0 para algum v√©rtice i.
	‚Ä¢	BFS n√£o pode detectar ciclos negativos porque n√£o lida com pesos.
	
‚úÖ Quando usar BFS ent√£o?
	‚Ä¢	Para encontrar o menor caminho em grafos n√£o ponderados (peso = 1 em todas as arestas).
	‚Ä¢	Para descobrir conectividade, componentes, n√≠veis ou dist√¢ncias m√≠nimas a partir de uma √∫nica origem em grafos simples.
"""

"""
üìå Floyd-Warshall: Extens√µes e Aplica√ß√µes

1Ô∏è‚É£ Adaptar o algoritmo para rastrear os caminhos

Conceito:
Al√©m de calcular as menores dist√¢ncias, podemos tamb√©m reconstruir o caminho real entre dois v√©rtices.

Como fazer:
Criamos uma matriz next[i][j] que armazena o pr√≥ximo v√©rtice no caminho de i para j.
Se next[i][j] = k, isso significa que, para ir de i a j, o primeiro passo √© para k.

Exemplo de inicializa√ß√£o:

# Caminho direto
if graph[i][j] != INF:
    next[i][j] = j
else:
    next[i][j] = None
"""

# Para reconstruir o caminho de i at√© j:
def construct_path(i, j, next):
    if next[i][j] is None:
        return []

    path = [i]
    while i != j:
        i = next[i][j]
        path.append(i)
    return path

"""
üìù Exerc√≠cio:
Dado um grafo com 4 v√©rtices, utilize o algoritmo de Floyd-Warshall para:
	1.	Calcular as menores dist√¢ncias.
	2.	Exibir o caminho mais curto de cada par de v√©rtices.

Entrada:

graph = [
    [0,   1,   4, INF],
    [INF, 0,   2, INF],
    [INF, INF, 0, 3],
    [INF, INF, INF, 0]
]
"""

"""
1Ô∏è‚É£ Criar a matriz de next (pr√≥ximo passo no caminho)

Essa matriz serve para reconstruir os caminhos. Se o caminho direto de i a j existe inicialmente, colocamos next[i][j] = j. Se n√£o houver caminho direto, deixamos como None.

2Ô∏è‚É£ Durante as atualiza√ß√µes de dist√¢ncia, atualizar tamb√©m next[i][j]

Se encontramos um caminho melhor passando por k, fazemos:

    next[i][j] = next[i][k]
    
Isso quer dizer: ‚ÄúPara ir de i at√© j, primeiro v√° para onde voc√™ iria a partir de i at√© k‚Äù.

3Ô∏è‚É£ Reconstruir o caminho entre i e j

Usamos a matriz next para montar o caminho passo a passo, at√© chegar em j.
"""

INF = float('inf')

def floyd_warshall_with_path(graph):
    n = len(graph)
    dist = [row[:] for row in graph]
    next_node = [[None if graph[i][j] == INF else j for j in range(n)] for i in range(n)]

    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][k] != INF and dist[k][j] != INF:
                    if dist[i][j] > dist[i][k] + dist[k][j]:
                        dist[i][j] = dist[i][k] + dist[k][j]
                        next_node[i][j] = next_node[i][k]

    return dist, next_node

def reconstruct_path(u, v, next_node):
    if next_node[u][v] is None:
        return []
    path = [u]
    while u != v:
        u = next_node[u][v]
        path.append(u)
    return path

# üß™ Exemplo de uso

graph = [
    [0,   3,   INF, 5],
    [2,   0,   INF, 4],
    [INF, 1,   0,   INF],
    [INF, INF, 2,   0]
]

dist, next_node = floyd_warshall_with_path(graph)

print("")
print("Reconstruct path:")
# Exibir caminho e dist√¢ncia entre todos os pares
for i in range(len(graph)):
    for j in range(len(graph)):
        if i != j:
            path = reconstruct_path(i, j, next_node)
            if path:
                print(f"Caminho de {i} a {j}: {path} | Dist√¢ncia: {dist[i][j]}")
            else:
                print(f"N√£o h√° caminho de {i} a {j}")


"""
Adaptando para grafos n√£o-direcionados:

üß† Lembrete r√°pido: Grafo n√£o direcionado

Um grafo n√£o direcionado √© aquele onde a aresta entre u e v implica que h√° conex√£o nos dois sentidos:
Se h√° aresta u ‚Üí v, tamb√©m h√° v ‚Üí u.

üõ†Ô∏è Passos para adaptar
	1.	Construir a matriz de adjac√™ncia sim√©trica:
    Para cada aresta (u, v) com peso w, atribu√≠mos:

        graph[u][v] = w
        graph[v][u] = w
    
	2.	Executar o Floyd-Warshall normalmente:
    O algoritmo funciona do mesmo jeito, porque ele opera sobre a matriz. A diferen√ßa √© s√≥ garantir que a entrada seja sim√©trica.
"""
INF = float('inf')

def floyd_warshall_with_path(graph):
    n = len(graph)
    dist = [row[:] for row in graph]
    next_node = [[None if graph[i][j] == INF else j for j in range(n)] for i in range(n)]

    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][k] != INF and dist[k][j] != INF:
                    if dist[i][j] > dist[i][k] + dist[k][j]:
                        dist[i][j] = dist[i][k] + dist[k][j]
                        next_node[i][j] = next_node[i][k]

    return dist, next_node

def reconstruct_path(u, v, next_node):
    if next_node[u][v] is None:
        return []
    path = [u]
    while u != v:
        u = next_node[u][v]
        path.append(u)
    return path

"""
Detec√ß√£o de ciclos negativos:

O algoritmo de Floyd-Warshall pode detectar ciclos negativos ao verificar a diagonal principal da matriz de dist√¢ncias:
	‚Ä¢	Se qualquer dist[i][i] < 0, isso indica que h√° um ciclo negativo acess√≠vel a partir do v√©rtice i.
"""

INF = float('inf')

def floyd_warshall_with_negative_cycle_detection(graph):
    n = len(graph)
    dist = [row[:] for row in graph]  # c√≥pia da matriz

    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][k] != INF and dist[k][j] != INF:
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])

    # Verifica ciclos negativos na diagonal
    for i in range(n):
        if dist[i][i] < 0:
            return True  # Ciclo negativo detectado

    return False

"""
Matriz de predecessores:
    A matriz de predecessores (pred) no algoritmo de Floyd-Warshall √© usada para reconstruir os caminhos m√≠nimos entre pares de v√©rtices.
    
üß† O que √© a matriz de predecessores?
	‚Ä¢	pred[i][j] guarda o v√©rtice anterior a j no caminho m√≠nimo de i at√© j.
	‚Ä¢	Inicialmente:
	‚Ä¢	Se houver uma aresta direta de i para j, ent√£o pred[i][j] = i.
	‚Ä¢	Se i == j, ent√£o pred[i][j] = None.
	‚Ä¢	Se n√£o h√° caminho direto, ent√£o pred[i][j] = None.

Durante o algoritmo:
	‚Ä¢	Se o caminho i ‚Üí k ‚Üí j for mais curto que o atual i ‚Üí j, ent√£o:
	‚Ä¢	pred[i][j] = pred[k][j]
	

‚úÖ Implementa√ß√£o com matriz de predecessores
"""

INF = float('inf')

def floyd_warshall_with_path(graph):
    n = len(graph)
    dist = [row[:] for row in graph]
    pred = [[None for _ in range(n)] for _ in range(n)]

    # Inicializa√ß√£o
    for i in range(n):
        for j in range(n):
            if graph[i][j] != INF and i != j:
                pred[i][j] = i

    # Floyd-Warshall com atualiza√ß√£o de predecessores
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][k] != INF and dist[k][j] != INF:
                    if dist[i][k] + dist[k][j] < dist[i][j]:
                        dist[i][j] = dist[i][k] + dist[k][j]
                        pred[i][j] = pred[k][j]

    return dist, pred

# üîÅ Fun√ß√£o para reconstruir o caminho de u at√© v
def reconstruct_path(pred, u, v):
    if pred[u][v] is None:
        return []

    path = [v]
    while u != v:
        v = pred[u][v]
        path.append(v)
    path.reverse()
    return path

# üß™ Exemplo de uso

graph = [
    [0,     3,     INF,   5],
    [2,     0,     INF,   4],
    [INF,   1,     0,     INF],
    [INF,   INF,   2,     0]
]

dist, pred = floyd_warshall_with_path(graph)

# Reconstruir o caminho de 0 at√© 2
path = reconstruct_path(pred, 0, 2)

print("Caminho m√≠nimo de 0 at√© 2:", path)

