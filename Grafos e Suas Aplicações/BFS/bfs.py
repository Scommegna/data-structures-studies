"""
üìå Algoritmo BFS (Breadth-First Search)

O BFS (Busca em Largura) √© um algoritmo para percorrer ou buscar em um grafo. Ele explora todos os v√©rtices em largura, ou seja, visita primeiro todos os vizinhos de um n√≥ antes de avan√ßar para os pr√≥ximos n√≠veis.

üí° Caracter√≠sticas do BFS
	‚Ä¢	Utiliza fila (FIFO - Primeiro a Entrar, Primeiro a Sair).
	‚Ä¢	Garante o caminho mais curto em um grafo n√£o ponderado.
	‚Ä¢	√â √∫til para:
	    ‚Ä¢	Encontrar caminhos m√≠nimos.
	    ‚Ä¢	Verificar a conectividade de um grafo.
	    ‚Ä¢	Resolver quebra-cabe√ßas como o Cubo de Rubik.
"""

# ‚úÖ 1. Implementa√ß√£o com Lista de Adjac√™ncia

from collections import deque
from os.path import pathsep


class Graph:
    def __init__(self):
        self.adj_list = {}
        
    def add_edge(self, u, v):
        if u not in self.adj_list:
            self.adj_list[u] = []
        if v not in self.adj_list:
            self.adj_list[v] = []
            
        self.adj_list[u].append(v)
        self.adj_list[v].append(u) #Grafo n√£o-direcionado
        
    def bfs(self, start):
        visited = set()
        queue = deque([start])
        
        while queue:
            node = queue.popleft()
            
            if node not in visited:
                print(node, end=" ")
                visited.add(node)
                queue.extend(self.adj_list[node])
                
# Exemplo de uso
g = Graph()
g.add_edge(0, 1)
g.add_edge(0, 2)
g.add_edge(1, 3)
g.add_edge(1, 4)
g.add_edge(2, 5)
g.add_edge(2, 6)

print("BFS a partir do v√©rtice 0:")
g.bfs(1)

# ‚úÖ 2. Implementa√ß√£o com Matriz de Adjac√™ncia

from collections import deque

def bfs_matrix(graph, start):
    n = len(graph)
    visited = [False] * n
    queue = deque([start])
    
    while queue:
        node = queue.popleft()
        
        if not visited[node]:
            print(node, end=" ")
            visited[node] = True
            
            for neighbor in range(n):
                if graph[node][neighbor] == 1 and not visited[neighbor]:
                    queue.append(neighbor)
    
    
# Exemplo de uso: Matriz de Adjac√™ncia
graph = [
    [0, 1, 1, 0, 0, 0, 0],  # 0 ‚Üí 1, 2
    [1, 0, 0, 1, 1, 0, 0],  # 1 ‚Üí 0, 3, 4
    [1, 0, 0, 0, 0, 1, 1],  # 2 ‚Üí 0, 5, 6
    [0, 1, 0, 0, 0, 0, 0],  # 3 ‚Üí 1
    [0, 1, 0, 0, 0, 0, 0],  # 4 ‚Üí 1
    [0, 0, 1, 0, 0, 0, 0],  # 5 ‚Üí 2
    [0, 0, 1, 0, 0, 0, 0]   # 6 ‚Üí 2
]

print("BFS a partir do v√©rtice 0:")
bfs_matrix(graph, 0)

"""
üìù Exerc√≠cios Simples

1Ô∏è‚É£ (F√°cil) Dado o seguinte grafo, implemente o BFS e mostre a sequ√™ncia de visita:

    (0) - (1) - (2)
    |      |
    (3)    (4)
    
Entrada: bfs(0)
Sa√≠da esperada: 0 1 3 2 4
"""

exercise_graph = {
    0: [1, 3],
    1: [0, 2, 4],
    2: [1],
    3: [0],
    4: [1]
}

exercise_graph2 = [
    [0, 1, 0, 1, 0],
    [1, 0, 1, 0, 1],
    [0, 1, 0, 0, 0],
    [1, 0, 0, 0, 0],
    [0, 1, 0, 0, 0]
]

def bfs_adj_list(graph, start):
    visited = set()
    queue = deque([start])
    
    while queue:
        node = queue.popleft()
        
        if node not in visited:
            print(node, end=" ")
            visited.add(node)
            
            queue.extend(graph[node])
            
def bfs_adj_matrix(graph, start):
    n = len(graph)
    visited = [False] * n
    queue = deque([start])
    
    while queue:
        node = queue.popleft()
        
        if not visited[node]:
            print(node, end=" ")
            visited[node] = True
            
        for neighbor in range(n):
            if not visited[neighbor] and graph[node][neighbor] == 1:
                queue.append(neighbor)
            
print("------------------------------")
bfs_adj_list(exercise_graph, 0)
print("------------------------------")
bfs_adj_matrix(exercise_graph2, 0)
    
# 2Ô∏è‚É£ (M√©dio) Modifique a implementa√ß√£o de BFS para contar o n√∫mero de componentes conectados em um grafo.

"""
‚úÖ O que s√£o componentes conectados em um grafo?

üìå Defini√ß√£o (grafo n√£o direcionado):

Um componente conectado √© um subconjunto de v√©rtices de um grafo n√£o direcionado onde:
	‚Ä¢	Qualquer v√©rtice pode ser alcan√ßado a partir de qualquer outro dentro do mesmo componente.
	‚Ä¢	E n√£o existe nenhuma conex√£o com v√©rtices fora desse subconjunto.

Em outras palavras:

Um componente conectado √© uma ‚Äúilha‚Äù dentro do grafo onde todos os v√©rtices est√£o conectados entre si, mas n√£o com v√©rtices de outras ‚Äúilhas‚Äù.


üß≠ Defini√ß√£o (grafo direcionado):

Em um grafo direcionado, h√° dois tipos:
	‚Ä¢	Componente fortemente conectado: todos os v√©rtices do componente s√£o acess√≠veis entre si em ambas as dire√ß√µes.
	‚Ä¢	Componente fracamente conectado: se ignorarmos a dire√ß√£o das arestas, todos os v√©rtices estariam conectados.
	
üìä Exemplo (grafo n√£o direcionado)

Imagine o grafo:

0 ‚Äî‚Äî 1      3 ‚Äî‚Äî 4      5
     |              
     

	‚Ä¢	Componente 1: {0, 1}
	‚Ä¢	Componente 2: {3, 4}
	‚Ä¢	Componente 3: {5} (v√©rtice isolado)

    Total: 3 componentes conectados
    

üí° Como encontrar componentes conectados?

Usamos algoritmos como:
	‚Ä¢	BFS (Busca em Largura)
	‚Ä¢	DFS (Busca em Profundidade)

Cada vez que voc√™ encontra um v√©rtice n√£o visitado e inicia uma busca, voc√™ est√° entrando em um novo componente.

"""

graph = {
    0: [1],
    1: [0],
    2: [3],
    3: [2, 4],
    4: [3],
    5: [],
}

def bfs(start, visited, graph):
    queue = deque([start])
    visited.add(start)

    while queue:
        node = queue.popleft()
        for neighbor in graph[node]:
            if not neighbor in visited:
                visited.add(neighbor)
                queue.append(neighbor)

def count_connected_components(graph):
    visited = set()
    components_count = 0

    for key in graph.keys():
        if not key in visited:
            bfs(key, visited, graph)
            components_count += 1

    return components_count

print("")
print("Medium exercise: found connected components in graph:")
print(count_connected_components(graph))

# 3Ô∏è‚É£ (Dif√≠cil) Use BFS para encontrar o menor caminho entre dois v√©rtices em um grafo n√£o ponderado.
def bfs_for_shortest_path(start, end, graph):
    visited = set([start])
    paths = {start: [start]}
    queue = deque([start])

    while queue:
        current = queue.popleft()
        for neighbor in graph[current]:
            if neighbor not in visited:
                visited.add(neighbor)
                paths[neighbor] = paths[current] + [neighbor]
                queue.append(neighbor)

    if end in paths:
        return paths[end]

    return None

first_input = {
    0: [1, 2],
    1: [0, 3],
    2: [0, 3],
    3: [1, 2, 4],
    4: [3]
}

print("")
print("output for hard exercise of find shortest path between nodes")
print(bfs_for_shortest_path(0, 4, first_input))